//go:build ignore
// +build ignore

package common

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"os" // Ensure 'os' is imported
	"text/template"
	"time"
	// "io/ioutil" // Ensure 'io/ioutil' is NOT imported
)

const timezonesJSONPath = "timezones.json"
const templateFileTimezones = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package common

var validTimezones = map[string]struct{}{
{{range .Timezones}}	"{{.Name}}": {},
{{end}}
}`

type TimezoneEntry struct {
	Name     string `json:"name"`
	Obsolete bool   `json:"obsolete"`
}

func main() {
	// Read timezones.json
	jsonData, err := os.ReadFile(timezonesJSONPath) // Uses os.ReadFile
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error reading timezones.json: %v\n", err)
		os.Exit(1)
	}

	var timezones []TimezoneEntry
	if err := json.Unmarshal(jsonData, &timezones); err != nil {
		fmt.Fprintf(os.Stderr, "Error unmarshalling timezones.json: %v\n", err)
		os.Exit(1)
	}

	var validTimezones []TimezoneEntry
	for _, tz := range timezones {
		if !tz.Obsolete {
			validTimezones = append(validTimezones, tz)
		} else {
			fmt.Printf("Skipping obsolete timezone: %s\n", tz.Name)
		}
	}

	templ := template.Must(
		template.New("timezones").Parse(templateFileTimezones),
	)

	data := struct {
		Timestamp string
		Timezones []TimezoneEntry
	}{
		Timestamp: time.Now().Format(time.RFC1123),
		Timezones: validTimezones,
	}

	var generatedCode bytes.Buffer
	if err := templ.Execute(&generatedCode, data); err != nil {
		fmt.Fprintf(os.Stderr, "Error executing timezone template: %v\n", err)
		os.Exit(1)
	}

	formattedCode, err := format.Source(generatedCode.Bytes())
	if err != nil {
		fmt.Fprintf(
			os.Stderr,
			"Error formatting generated timezone code: %v\n",
			err,
		)
		os.Exit(1)
	}

	// Write the formatted code to generated_timezone_codes.go
	err = os.WriteFile(
		"generated_timezone_codes.go",
		formattedCode,
		0644,
	) // Uses os.WriteFile
	if err != nil {
		fmt.Fprintf(
			os.Stderr,
			"Error writing generated_timezone_codes.go: %v\n",
			err,
		)
		os.Exit(1)
	}

	fmt.Println("Successfully generated generated_timezone_codes.go")
}
