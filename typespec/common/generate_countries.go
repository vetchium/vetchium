//go:build ignore
// +build ignore

package common

import (
	"bytes"
	"encoding/json"
	"fmt"
	"go/format"
	"os"
	"strings"
	"text/template"
	"time"
)

const countriesJSONPath = "countries.json"
const templateFileCountries = `// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package common

var validCountryCodes = map[string]struct{}{
{{range .Countries}}	"{{.CountryCode}}": {},
{{end}}
}`

type Country struct {
	CountryCode string `json:"country_code"`
	EnglishName string `json:"en"`
	Obsolete    *bool  `json:"obsolete,omitempty"` // Pointer to bool to distinguish between false and not set
}

func main() {
	// Read the JSON file
	jsonData, err := os.ReadFile(countriesJSONPath) // Uses os.ReadFile
	if err != nil {
		fmt.Printf("Error reading %s: %v\n", countriesJSONPath, err)
		os.Exit(1)
	}

	var countries []Country
	if err := json.Unmarshal(jsonData, &countries); err != nil {
		fmt.Printf(
			"Error unmarshalling JSON from %s: %v\n",
			countriesJSONPath,
			err,
		)
		os.Exit(1)
	}

	var validCountries []Country
	for _, country := range countries {
		if country.Obsolete != nil && *country.Obsolete {
			fmt.Printf(
				"Skipping obsolete country: %s (%s)\n",
				country.EnglishName,
				country.CountryCode,
			)
			continue
		}
		// Ensure CountryCode is uppercase for consistency, though JSON should be authoritative
		validCountries = append(
			validCountries,
			Country{CountryCode: strings.ToUpper(country.CountryCode)},
		)
	}

	templ := template.Must(
		template.New("countries").Parse(templateFileCountries),
	)

	data := struct {
		Timestamp string
		Countries []Country
	}{
		Timestamp: time.Now().Format(time.RFC1123),
		Countries: validCountries,
	}

	var generatedCode bytes.Buffer
	if err := templ.Execute(&generatedCode, data); err != nil {
		fmt.Printf("Error executing template: %v\n", err)
		os.Exit(1)
	}

	formattedCode, err := format.Source(generatedCode.Bytes())
	if err != nil {
		fmt.Printf("Error formatting generated code: %v\n", err)
		os.Exit(1)
	}

	err = os.WriteFile("generated_country_codes.go", formattedCode, 0644)
	if err != nil {
		fmt.Printf("Error writing to generated_country_codes.go: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("Successfully generated generated_country_codes.go")
}
