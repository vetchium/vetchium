# Dependencies
minio:
  fullnameOverride: minio
  mode: standalone
  accessKey:
    password: "minioadmin"
  secretKey:
    password: "minioadmin"

mailpit:
  fullnameOverride: mailpit

# Specific application configurations
harrypotter:
  replicaCount: 1
  image:
    repository: vetchium/harrypotter
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer
    port: 80
    targetPort: 3000

granger:
  replicaCount: 1
  strategy: Recreate
  image:
    repository: vetchium/granger
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  config:
    env: "dev"
    onboardTokenLife: "3m"
    port: "8080"
    employerBaseUrl: "http://localhost:3001"
    hubBaseUrl: "http://localhost:3002"
  secrets:
    postgres: postgres-app
    smtp: smtp-credentials
    s3: s3-credentials
  service:
    type: ClusterIP
    port: 8080

hermione:
  replicaCount: 3
  image:
    repository: vetchium/hermione
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  initContainer:
    enabled: true
    kubectlImage: bitnami/kubectl:latest
    sqitchJobLabelSelector: "app.kubernetes.io/component=sqitch"
  config:
    employerWebUrl: "http://localhost:3001"
    employerTfaTokLife: "5m"
    employerSessionTokLife: "15m"
    employerLtsTokLife: "730h"
    employerEmployeeInviteTokLife: "5m"
    hubWebUrl: "http://localhost:3002"
    hubTfaTokLife: "5m"
    hubSessionTokLife: "15m"
    hubLtsTokLife: "730h"
    hubUserInviteTokLife: "5m"
    hubPasswordResetTokLife: "5m"
    port: "8080"
    timingAttackDelay: "1s"
  secrets:
    postgres: postgres-app
    s3: s3-credentials
  service:
    type: ClusterIP
    port: 8080
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi

ronweasly:
  replicaCount: 1
  image:
    repository: vetchium/ronweasly
    pullPolicy: IfNotPresent
  serviceAccount:
    create: false
    name: "default"
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  readinessProbe:
    httpGet:
      path: /
    initialDelaySeconds: 10
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /
    initialDelaySeconds: 15
    periodSeconds: 10

sortinghat:
  replicaCount: 1
  image:
    repository: vetchium/sortinghat
    pullPolicy: IfNotPresent
  config:
    port: "8080"
  serviceAccount:
    create: true
  secrets:
    s3: s3-credentials
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "3Gi"
      cpu: "3"
  livenessProbe:
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
    initialDelaySeconds: 5
    periodSeconds: 5
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access

sqitch:
  enabled: true
  backoffLimit: 5
  image:
    repository: vetchium/sqitch
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  secrets:
    postgres: postgres-app
  initContainer:
    kubectlImage: bitnami/kubectl:latest
    postgresLabelSelector: "cnpg.io/cluster=postgres"
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access

devSeed:
  enabled: true
  backoffLimit: 3
  image:
    repository: vetchium/dev-seed
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  secrets:
    postgres: postgres-app
  hermioneServiceUrl: "http://hermione:{{ .Values.hermione.service.port }}"
  mailpitServiceUrl: "http://mailpit-http"
  initContainer:
    kubectlImage: bitnami/kubectl:latest
    postgresLabelSelector: "cnpg.io/cluster=postgres"
    hermioneComponentLabel: "app.kubernetes.io/component=hermione"
    mailpitLabelSelector: "app.kubernetes.io/name=mailpit"
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access
