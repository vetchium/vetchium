# Default values for vetchium-apps-helm.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Dependencies
minio:
  fullnameOverride: minio
  mode: standalone
  accessKey:
    password: "minioadmin"
  secretKey:
    password: "minioadmin"

mailpit:
  fullnameOverride: mailpit

# Specific application configurations
harrypotter:
  replicaCount: 1
  image:
    repository: vetchium/harrypotter
    pullPolicy: IfNotPresent
  service:
    type: LoadBalancer # Or ClusterIP, NodePort depending on needs
    port: 80 # External port for the service
    targetPort: 3000 # Container port

granger:
  replicaCount: 1
  strategy: Recreate # Or RollingUpdate
  image:
    repository: vetchium/granger
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  config:
    env: "dev"
    onboardTokenLife: "3m"
    port: "8080" # This is the internal container port
    employerBaseUrl: "http://localhost:3001" # Needs update for cluster DNS
    hubBaseUrl: "http://localhost:3002" # Needs update for cluster DNS
  # Names of existing secrets
  secrets:
    postgres: postgres-app
    smtp: smtp-credentials
    s3: s3-credentials
  service:
    type: ClusterIP # Usually internal services are ClusterIP
    port: 8080 # Service port
  # Define resource requests/limits if needed
  # resources: {}
  # Node selector, affinity, tolerations can be added here if needed from the global values or specific overrides
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component # Use the helm label key
                operator: In
                values:
                  - granger
          topologyKey: "kubernetes.io/hostname"

# ClusterRoleBinding specific values
grangerClusterRoleBinding:
  # Whether to create the binding. Set to false if the binding is managed elsewhere.
  create: true
  # The name of the ClusterRole to bind to. Assumes 'full-access' exists.
  clusterRoleName: full-access

# Add sections for other apps like ronweasly, sortinghat, etc. here
hermione:
  replicaCount: 3
  image:
    repository: vetchium/hermione
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  # Wait for sqitch job completion before starting hermione pod
  initContainer:
    enabled: true
    kubectlImage: bitnami/kubectl:latest
    # Assuming sqitch template uses this standard component label
    sqitchJobLabelSelector: "app.kubernetes.io/component=sqitch"
  config:
    employerWebUrl: "http://localhost:3001" # TODO: Update with K8s service name/port for Granger/Frontend?
    employerTfaTokLife: "5m"
    employerSessionTokLife: "15m"
    employerLtsTokLife: "730h"
    employerEmployeeInviteTokLife: "5m"
    hubWebUrl: "http://localhost:3002" # TODO: Update with K8s service name/port for SortingHat/Frontend?
    hubTfaTokLife: "5m"
    hubSessionTokLife: "15m"
    hubLtsTokLife: "730h"
    hubUserInviteTokLife: "5m"
    hubPasswordResetTokLife: "5m"
    port: "8080" # Container port
    timingAttackDelay: "1s"
  secrets:
    postgres: postgres-app # Name of the K8s Secret for PostgreSQL connection
    s3: s3-credentials # Name of the K8s Secret for S3 credentials
  service:
    type: ClusterIP # Service type (ClusterIP is common for internal services)
    port: 8080 # Service port
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    # requests: {} # Define requests if needed

# ClusterRoleBinding specific values
hermioneClusterRoleBinding:
  create: true
  clusterRoleName: full-access

ronweasly:
  replicaCount: 1
  image:
    repository: vetchium/ronweasly
    pullPolicy: IfNotPresent
  service:
    type: ClusterIP
    port: 80
    targetPort: 3000
  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  readinessProbe:
    httpGet:
      path: /
    initialDelaySeconds: 10
    periodSeconds: 5
  livenessProbe:
    httpGet:
      path: /
    initialDelaySeconds: 15
    periodSeconds: 10

# Add sections for sortinghat, sqitch, etc. here
sortinghat:
  replicaCount: 1
  image:
    repository: vetchium/sortinghat
    pullPolicy: IfNotPresent
  config:
    port: "8080"
  serviceAccount:
    create: true
  secrets:
    s3: s3-credentials # Name of the K8s secret containing S3 creds
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  resources:
    requests:
      memory: "512Mi"
      cpu: "200m"
    limits:
      memory: "3Gi"
      cpu: "3"
  livenessProbe:
    httpGet:
      path: /health
    initialDelaySeconds: 30
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /health
    initialDelaySeconds: 5
    periodSeconds: 5
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access

sqitch:
  enabled: true
  backoffLimit: 5
  image:
    repository: vetchium/sqitch
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  secrets:
    postgres: postgres-app
  initContainer:
    kubectlImage: bitnami/kubectl:latest
    postgresLabelSelector: "cnpg.io/cluster=postgres"
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access

devSeed:
  enabled: true
  backoffLimit: 3
  image:
    repository: vetchium/dev-seed
    pullPolicy: IfNotPresent
  serviceAccount:
    create: true
  secrets:
    postgres: postgres-app
  hermioneServiceUrl: "http://hermione:{{ .Values.hermione.service.port }}"
  mailpitServiceUrl: "http://mailpit-http"
  initContainer:
    kubectlImage: bitnami/kubectl:latest
    postgresLabelSelector: "cnpg.io/cluster=postgres"
    hermioneComponentLabel: "app.kubernetes.io/component=hermione"
    mailpitLabelSelector: "app.kubernetes.io/name=mailpit"
  clusterRoleBinding:
    create: true
    clusterRoleName: full-access
