{{- if .Values.sqitch.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  # Add git sha to name to ensure job runs on every deploy if chart/values change
  # Helm doesn't automatically replace jobs unless the template changes.
  name: {{ include "vetchium-apps-helm.fullname" . }}-sqitch-{{ .Values.sqitch.image.tag | default .Chart.AppVersion | sha256sum | trunc 8 }}
  labels:
    {{- include "vetchium-apps-helm.labels" . | nindent 4 }}
    app.kubernetes.io/component: sqitch
  annotations:
    # Add checksum of values to trigger job update on values change
    "checksum/config": {{ .Values | toYaml | sha256sum }}
spec:
  backoffLimit: {{ .Values.sqitch.backoffLimit }}
  template:
    metadata:
      labels:
        {{- include "vetchium-apps-helm.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: sqitch
        version: {{ default .Chart.AppVersion .Values.sqitch.image.tag }}
    spec:
      {{- if .Values.sqitch.serviceAccount.create }}
      serviceAccountName: {{ include "vetchium-apps-helm.sqitchServiceAccountName" . }}
      {{- else if .Values.sqitch.serviceAccount.name }}
      serviceAccountName: {{ .Values.sqitch.serviceAccount.name }}
      {{- end }}
      initContainers:
        - name: wait-for-postgres
          image: {{ .Values.sqitch.initContainer.kubectlImage }}
          command: ["sh", "-c"]
          args:
            - |
              until kubectl get pods -l {{ .Values.sqitch.initContainer.postgresLabelSelector }} -n {{ .Release.Namespace }} -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; do
                echo "Waiting for PostgreSQL pods ({{ .Values.sqitch.initContainer.postgresLabelSelector }}) to be ready..."
                sleep 5
              done
      containers:
        - name: sqitch
          image: "{{ .Values.sqitch.image.repository }}:{{ default .Chart.AppVersion .Values.sqitch.image.tag }}"
          imagePullPolicy: {{ .Values.sqitch.image.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - |
              set -e
              # Transform postgresql:// to db:pg:// format expected by sqitch
              URI=$(cat /mnt/secrets/uri | sed 's|postgresql://|db:pg://|')
              echo "Deploying Sqitch changes..."
              sqitch deploy --verbose "${URI}"
              echo "Verifying Sqitch changes..."
              sqitch verify --verbose "${URI}"
              echo "Sqitch deployment complete."
          volumeMounts:
            - name: postgres-creds
              mountPath: /mnt/secrets
              readOnly: true
          # Add resource limits/requests if needed
          # resources:
          #   {{- toYaml .Values.sqitch.resources | nindent 12 }}
      volumes:
        - name: postgres-creds
          secret:
            secretName: {{ .Values.sqitch.secrets.postgres }} # Assumes secret is in the same namespace
      restartPolicy: Never
---
{{- if .Values.sqitch.serviceAccount.create }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "vetchium-apps-helm.sqitchServiceAccountName" . }}
  labels:
    {{- include "vetchium-apps-helm.labels" . | nindent 4 }}
    app.kubernetes.io/component: sqitch
  {{- with .Values.sqitch.serviceAccount.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
---
{{- end }}
{{- if .Values.sqitch.clusterRoleBinding.create }}
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ include "vetchium-apps-helm.fullname" . }}-sqitch-crb
  labels:
    {{- include "vetchium-apps-helm.labels" . | nindent 4 }}
    app.kubernetes.io/component: sqitch
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.sqitch.clusterRoleBinding.clusterRoleName }}
subjects:
  - kind: ServiceAccount
    name: {{ include "vetchium-apps-helm.sqitchServiceAccountName" . }}
    namespace: {{ .Release.Namespace }}
{{- end }}
{{- end }} # End if .Values.sqitch.enabled
