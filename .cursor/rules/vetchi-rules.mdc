---
description: 
globs: 
alwaysApply: true
---
# Your rule content

- We are implementing a social networking and jobs website. ronweasly directory contains a nextjs app which is the user-facing website. harrypotter directory contains a nextjs app which is the employer-facing website. api directory contains the backend golang code. sqitch directory contains the SQL needed for the database tables and operations
- When making network calls in *.tsx code, always try to use struct or const exposed from the typespec library. Do not create json.stringify with unstructured data.
- When writing SQL queries in *.go or *.pgsql files always adhere to the database schema defined under [1-initdb.sql](mdc:sqitch/deploy/1-initdb.sql) or the *.sql files under sqitch directory
- Vetchium is a jobs and professional social networking site. Its code organization is explained below
- The @api directory in top-level contains the golang code for implementing the backend. api/cmd/hermione is a golang http server that contains the stateless services with the individual endpoints routed on [router.go](mdc:api/internal/hermione/router.go) api/cmd/granger contains stateful services
- The sqitch directory contains the database migrations under *.sql files. postgresql is used to save the data.
- The @harrypotter directory in the top-level contains an employer site, where employers can login and create openings, shortlist or reject applicants, evaluate candidacies, schedule interviews, manage interview feedbacks, roll out offers, etc.
- The @ronweasly directory in the top-level contains the hub site, where users can login, find openings, apply, connect with others, read or write social media posts, etc. The users of this are referred to as HubUsers or hubusers etc.
- The [hedwig.go](mdc:api/internal/hedwig/hedwig.go) contains a templating library for sending emails from the backend
- The typespec directory contains the employer and hub specific .tsp files, which document the API schema. From these files, [openapi.yaml](mdc:typespec/tsp-output/openapi.yaml) file is generated that contains the entire API spec compiled into a single file
- When generating test code, try to create table driven tests. Try to use functions in [tests-helpers_test.go](mdc:dolores/tests-helpers_test.go) when creating tests under dolores directory
- When generating test code, generate positive cases, negative cases, border conditions, invalid conditions, etc. Do not ignore any obvious failures.
- When generating test code, for every It() function in the test case, create a new dedicated user and use that. Do not reuse user accounts across multiple It test cases which may cause problems.

