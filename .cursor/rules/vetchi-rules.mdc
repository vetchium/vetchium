---
description: 
globs: 
alwaysApply: false
---
# Your rule content

- We are implementing a social networking and jobs website. ronweasly directory contains a nextjs app which is the user-facing website. harrypotter directory contains a nextjs app which is the employer-facing website. api directory contains the backend golang code. sqitch directory contains the SQL needed for the database tables and operations
- The typespec directory contains the employer and hub specific .tsp files, which document the API schema. From these files, @openapi.yaml file is generated that contains the entire API spec compiled into a single file
- [employer-routes.go](mdc:api/internal/hermione/employer-routes.go) contains the API endpoints entrypoint for the /employer APIs
- [hub-routes.go](mdc:api/internal/hermione/hub-routes.go) contains the API endpoints entrpoint for the /hub APIs
- When making network calls in *.tsx code, always try to use struct or const exposed from the typespec library. Do not create json.stringify with unstructured data.
- When writing SQL queries in *.go or *.pgsql files always adhere to the database schema defined under [1-initdb.sql](mdc:sqitch/deploy/1-initdb.sql) or the *.sql files under sqitch directory
- The sqitch directory contains the database migrations under *.sql files. postgresql is used to save the data.
- The [hedwig.go](mdc:api/internal/hedwig/hedwig.go) contains a templating library for sending emails from the backend
- All test code exist under dolores directory. There will be a *-up.pgsql and a *-down.pgsql file which will contain the SQL scripts needed to run before and after the test case execution. *_test.go will contain the actual test cases.
- When generating test code, try to create table driven tests. Try to use functions in [tests-helpers_test.go](mdc:dolores/tests-helpers_test.go) when creating tests under dolores directory
- When generating test code, generate positive cases, negative cases, border conditions, invalid conditions, etc. Do not ignore any obvious failures.
- When generating test code, for every It() function in the test case, create a new dedicated user and use that. Do not reuse user accounts across multiple It test cases which may cause problems.
