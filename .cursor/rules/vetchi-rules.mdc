---
description: 
globs: 
alwaysApply: false
---
# Your rule content

- We are implementing a social networking and jobs website. ronweasly directory contains a nextjs app which is the user-facing website. harrypotter directory contains a nextjs app which is the employer-facing website. api directory contains the backend golang code. sqitch directory contains the SQL needed for the database tables and operations
- The typespec directory contains the employer and hub specific .tsp files, which document the API schema. From these files, @openapi.yaml file is generated that contains the entire API spec compiled into a single file
- [employer-routes.go](mdc:api/internal/hermione/employer-routes.go) contains the API endpoints entrypoint for the /employer APIs
- [hub-routes.go](mdc:api/internal/hermione/hub-routes.go) contains the API endpoints entrpoint for the /hub APIs
- All the http handlers for the backend api are implemented under a suitable directory under the api/internal/hermione directory
- All the database functions come from [db.go](mdc:api/internal/db/db.go) interface. The implementation of these functions come from api/internal/postgres directory. No other part of the api backend code should have any SQL
- All the default values should be handled in the handler code and not on the SQL code or postgres package
- The postgres package should contain all the SQL to talk to a postgresql database
- All the error communication between the handler code and the postgres package should happen via [errors.go](mdc:api/internal/db/errors.go) and the db package. postgres specific errors or codes should not be sent to the handler. Do not return generic golang errors from the psotgres package to the handlers even though the function signatures say so. Return an appropriate error constant from [errors.go](mdc:api/internal/db/errors.go)
- When making network calls in *.tsx code, always try to use struct or const exposed from the typespec library. Do not create json.stringify with unstructured data.
- When writing SQL queries in *.go or *.pgsql files always adhere to the database schema defined under [1-initdb.sql](mdc:sqitch/deploy/1-initdb.sql) or the *.sql files under sqitch directory
- When writing SQL queries under the postgres package, in the .go files, do not add any trailing whitespace
- The sqitch directory contains the database migrations under *.sql files. postgresql is used to save the data.
- The [hedwig.go](mdc:api/internal/hedwig/hedwig.go) contains a templating library for sending emails from the backend
- All test code exist under dolores directory. There will be a *-up.pgsql and a *-down.pgsql file which will contain the SQL scripts needed to run before and after the test case execution. *_test.go will contain the actual test cases.
- When generating test code, try to create table driven tests. Try to use functions in [tests-helpers_test.go](mdc:dolores/tests-helpers_test.go) when creating tests under dolores directory
- When generating test code, generate positive cases, negative cases, border conditions, invalid conditions, etc. Do not ignore any obvious failures.
- When generating test code, for every It() function in the test case, create a new dedicated user and use that. Do not reuse user accounts across multiple It() test cases.
- When generating code avoid adding comments after the statement on each line. Comments should be done only on the start of a section. Imports should not have any comments.
- When generating tests under the dolores directory, there would be three sets of files that make up a single test case. A XXXX-something_test.go XXXX-something-up.pgsql and XXXX-something-down.pgsql
- The XXXX-something-up.pgsql file contains the seed data that must be executed prior to the tests on XXXX-something_test.go are executed. The XXXX-something-down.pgsql file cleans up the data that was insert on the seeding and during the test run
- All the records that we seed via these XXXX-something-up.pgsql must use an UUID of prefix 12345678-XXXX-XXXX-XXXX- for all the primary fields which rely on a UUID.
- Hardcoding these UUIDs with the four numeric digits on the filename, mentioned as XXXX above help us understand from where data is originated
- In .go code, always compare errors using, errors.Is(), for example:
```go
if errors.Is(err, pgx.ErrNoRows)
```

instead of
```go
if err == pgx.ErrNoRows
```
- Ensure that the code stays within 80 columns as much as possible. In certain log statements, it may not be possible. In those cases, log it like:
```go
h.Dbg("Prompt"
    "key1", "val1",
    "key2", "val2",
)
```

instead of
```go
h.Dbg(
    "Prompt",
    "key1",
    "val1",
    "key2",
    "val2",
)
```
- When writing front-end code, do not recreate any class or interface from the typespec directory. Instead of that, import the class or interface from the corresponding .ts file and use it. All the .ts file classes and interfaces are exported via the [index.ts](mdc:typespec/index.ts) and should be imported via that.
- Tests are executed via "make test" command using the [Makefile](mdc:Makefile) There are no other ways to run tests as some environment values needs to be set before the tests are run. Do not offer to run tests any other way. If you want to run a particular test, do it via FDescribe on the test file. Do not use other methods to focus on a particular test file via command line arguments.
- Do not add trailing whitespaces in the code that you generate
